<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>技术文档 on tyhzxh的个人博客</title><link>https://tyhzxh.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/</link><description>Recent content in 技术文档 on tyhzxh的个人博客</description><generator>Hugo -- 0.148.2</generator><language>zh-cn</language><lastBuildDate>Fri, 09 Feb 2024 17:44:43 +0800</lastBuildDate><atom:link href="https://tyhzxh.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/index.xml" rel="self" type="application/rss+xml"/><item><title>Git 版本控制学习笔记</title><link>https://tyhzxh.github.io/posts/git-notes/</link><pubDate>Fri, 09 Feb 2024 17:44:43 +0800</pubDate><guid>https://tyhzxh.github.io/posts/git-notes/</guid><description>Git版本控制系统的基础概念和常用操作，包括工作区、暂存区、版本库的概念以及各种Git命令的使用方法</description><content:encoded><![CDATA[<blockquote>
<p>本文是学习廖雪峰Git教程的学习笔记，整理了Git的基础概念和常用操作。</p></blockquote>
<h2 id="基础概念">基础概念</h2>
<p><em><strong>在.git文件所在目录下进行操作</strong></em></p>
<p>Git有三个重要的区域：</p>
<ol>
<li><strong>工作区(Working Directory)</strong> - 所处的文件目录</li>
<li><strong>暂存区(Stage)</strong> - 重点概念，临时存储修改的地方</li>
<li><strong>版本库(Repository)</strong> - 工作区有一个隐藏目录 <code>.git</code>，这个不算工作区，而是Git的版本库</li>
</ol>
<blockquote>
<p><strong>重要提示</strong>：创建Git版本库时，Git自动为我们创建了唯一一个master(main)分支，所以<code>git commit</code>就是往master(main)分支上提交更改。</p></blockquote>
<h2 id="基础操作windows下">基础操作(Windows下)</h2>
<p><strong>核心理念</strong>：<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p>
<p><strong>推荐环境</strong>：在PowerShell或Git Bash下输入命令
<em>建议使用Git Bash - 支持很多Linux下的命令</em></p>
<h3 id="初始化和添加文件">初始化和添加文件</h3>
<ol>
<li><strong>初始化Git仓库</strong>：使用<code>git init</code>命令</li>
<li><strong>添加文件到Git仓库</strong>，分两步：
<ul>
<li>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个工作区文件到暂存区</li>
<li>使用命令<code>git commit -m &lt;message&gt;</code>添加暂存区所有文件到Git仓库，完成</li>
</ul>
</li>
</ol>
<h3 id="-实用技巧">💡 实用技巧</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 一次性添加所有改动</span>
</span></span><span class="line"><span class="cl">git add .
</span></span></code></pre></div><h2 id="检查操作">检查操作</h2>
<h3 id="查看状态">查看状态</h3>
<p>检查 <em><strong>工作区+暂存区</strong></em> 的状态，使用<code>git status</code>命令：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Changes to be committed:
</span></span><span class="line"><span class="cl"><span class="o">(</span>use <span class="s2">&#34;git restore --staged &lt;file&gt;...&#34;</span> to unstage<span class="o">)</span>
</span></span><span class="line"><span class="cl">        modified:   1.md
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Changes not staged <span class="k">for</span> commit:
</span></span><span class="line"><span class="cl"><span class="o">(</span>use <span class="s2">&#34;git add &lt;file&gt;...&#34;</span> to update what will be committed<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>use <span class="s2">&#34;git restore &lt;file&gt;...&#34;</span> to discard changes in working directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">        modified:   1.md
</span></span></code></pre></div><h3 id="查看修改内容">查看修改内容</h3>
<p>如果<code>git status</code>告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git diff readme.txt 
</span></span><span class="line"><span class="cl">diff --git a/readme.txt b/readme.txt
</span></span><span class="line"><span class="cl">index 46d49bf..9247db6 <span class="m">100644</span>
</span></span><span class="line"><span class="cl">--- a/readme.txt
</span></span><span class="line"><span class="cl">+++ b/readme.txt
</span></span><span class="line"><span class="cl">@@ -1,2 +1,2 @@
</span></span><span class="line"><span class="cl">-Git is a version control system.
</span></span><span class="line"><span class="cl">+Git is a distributed version control system.
</span></span><span class="line"><span class="cl"> Git is free software.
</span></span></code></pre></div><h3 id="查看历史记录">查看历史记录</h3>
<p>在Git中，我们用<code>git log</code>命令查看历史修改记录：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git log
</span></span><span class="line"><span class="cl">commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 <span class="o">(</span>HEAD -&gt; master<span class="o">)</span>
</span></span><span class="line"><span class="cl">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;
</span></span><span class="line"><span class="cl">Date:   Fri May <span class="m">18</span> 21:06:15 <span class="m">2018</span> +0800
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">append GPL
</span></span></code></pre></div><p>如果嫌输出记录太多，可以加上<code>--pretty=oneline</code>参数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git log --pretty<span class="o">=</span>oneline
</span></span><span class="line"><span class="cl">049c19eb21cbe21986810b7de105d3d7ab584d1c <span class="o">(</span>HEAD -&gt; main<span class="o">)</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">a87bfdefbae52977a72b7955a406eab118a04df5 w
</span></span><span class="line"><span class="cl">1dc3373085994a336323614fa726732b582f22f2 <span class="m">1</span>
</span></span></code></pre></div><p><strong>说明</strong>：一大串类似<code>049c19eb21cbe...</code>的是commit id（版本号），由SHA1计算出来的一个非常大的数字，用十六进制表示。</p>
<h3 id="版本指针概念">版本指针概念</h3>
<p>在Git中：</p>
<ul>
<li><strong>HEAD</strong> 表示当前版本，也就是最新的提交</li>
<li><strong>HEAD^</strong> 表示上一个版本</li>
<li><strong>HEAD^^</strong> 表示上上一个版本</li>
<li><strong>HEAD~100</strong> 表示往上100个版本</li>
</ul>
<h2 id="回退操作">回退操作</h2>
<h3 id="工作区回退">工作区回退</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 丢弃工作区的修改</span>
</span></span><span class="line"><span class="cl">git checkout -- file
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 示例</span>
</span></span><span class="line"><span class="cl">git checkout -- readme.txt
</span></span></code></pre></div><p><strong>注意</strong>：<code>--</code> 很重要，不能省略！</p>
<h3 id="暂存区回退">暂存区回退</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 把暂存区的修改撤销掉（unstage），重新放回工作区</span>
</span></span><span class="line"><span class="cl">git reset HEAD &lt;file&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 示例</span>
</span></span><span class="line"><span class="cl">git reset HEAD 1.md
</span></span></code></pre></div><h3 id="版本库回退">版本库回退</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 回退到上一个版本</span>
</span></span><span class="line"><span class="cl">git reset --hard HEAD^
</span></span></code></pre></div><p><strong>个人理解</strong>：版本回退就是修改HEAD指针的指向（HEAD指向当前所处版本）</p>
<p>如果回退后想要恢复，可以使用<code>git reflog</code>来查看每一次命令的记录：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git reflog
</span></span><span class="line"><span class="cl">e475afc HEAD@<span class="o">{</span>1<span class="o">}</span>: reset: moving to HEAD^
</span></span><span class="line"><span class="cl">1094adb <span class="o">(</span>HEAD -&gt; master<span class="o">)</span> HEAD@<span class="o">{</span>2<span class="o">}</span>: commit: append GPL
</span></span><span class="line"><span class="cl">e475afc HEAD@<span class="o">{</span>3<span class="o">}</span>: commit: add distributed
</span></span><span class="line"><span class="cl">eaadf4e HEAD@<span class="o">{</span>4<span class="o">}</span>: commit <span class="o">(</span>initial<span class="o">)</span>: wrote a readme file
</span></span></code></pre></div><p>从输出可知，可以通过commit id来恢复到指定版本。</p>
<h2 id="删除操作">删除操作</h2>
<h3 id="普通删除-vs-git删除">普通删除 vs Git删除</h3>
<p><strong>普通情况下</strong>：直接在文件管理器中删除文件，或者用<code>rm</code>命令删除：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">rm test.txt
</span></span></code></pre></div><p><strong>在Git中</strong>，删除文件后查看状态：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Changes not staged <span class="k">for</span> commit:
</span></span><span class="line"><span class="cl"><span class="o">(</span>use <span class="s2">&#34;git add/rm &lt;file&gt;...&#34;</span> to update what will be committed<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>use <span class="s2">&#34;git checkout -- &lt;file&gt;...&#34;</span> to discard changes in working directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">deleted:    test.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">no changes added to commit <span class="o">(</span>use <span class="s2">&#34;git add&#34;</span> and/or <span class="s2">&#34;git commit -a&#34;</span><span class="o">)</span>
</span></span></code></pre></div><p>可以看出工作区和版本库不一致，此时有两个选择：</p>
<h3 id="选择1确实要删除">选择1：确实要删除</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 从版本库中删除文件</span>
</span></span><span class="line"><span class="cl">git rm test.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 提交删除操作</span>
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;remove test.txt&#34;</span>
</span></span></code></pre></div><h3 id="选择2误删恢复">选择2：误删恢复</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 从版本库恢复文件到工作区</span>
</span></span><span class="line"><span class="cl">git checkout -- test.txt
</span></span></code></pre></div><blockquote>
<p><strong>重要提醒</strong>：<code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以&quot;一键还原&quot;。但是，从来没有被添加到版本库就被删除的文件，是无法恢复的！</p></blockquote>
<h2 id="远程仓库">远程仓库</h2>
<h3 id="基本操作">基本操作</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 推送到远程仓库</span>
</span></span><span class="line"><span class="cl">git push origin master
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 添加远程仓库</span>
</span></span><span class="line"><span class="cl">git remote add origin https://github.com/tyhzxh/tyhzxh.github.io.git
</span></span></code></pre></div><h3 id="个人经验">个人经验</h3>
<p>如果是通过<code>git clone</code>获取的仓库，本地仓库和远程仓库会自动同步，所以每次只需要：</p>
<ol>
<li>在本地完成修改和提交</li>
<li>使用<code>git push</code>推送到远程仓库</li>
</ol>
<h2 id="总结">总结</h2>
<p>Git的核心概念是理解三个区域（工作区、暂存区、版本库）之间的关系，掌握了这个概念，Git的各种操作就变得清晰明了。记住：</p>
<ul>
<li><code>git add</code> 是将修改从工作区提交到暂存区</li>
<li><code>git commit</code> 是将暂存区的修改提交到版本库</li>
<li><code>git push</code> 是将本地版本库同步到远程仓库</li>
</ul>
<hr>
<p><em>参考资料：廖雪峰Git教程</em></p>
]]></content:encoded></item></channel></rss>