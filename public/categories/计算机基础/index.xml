<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>计算机基础 on tyhzxh的个人博客</title><link>https://tyhzxh.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</link><description>Recent content in 计算机基础 on tyhzxh的个人博客</description><generator>Hugo -- 0.148.2</generator><language>zh-cn</language><lastBuildDate>Sun, 07 Apr 2024 23:31:21 +0800</lastBuildDate><atom:link href="https://tyhzxh.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml"/><item><title>CSAPP第二章：信息的表示与处理</title><link>https://tyhzxh.github.io/posts/csapp-chapter2-data-representation/</link><pubDate>Sun, 07 Apr 2024 23:31:21 +0800</pubDate><guid>https://tyhzxh.github.io/posts/csapp-chapter2-data-representation/</guid><description>深入理解计算机系统第二章学习笔记，涵盖整数表示、补码、大小端、浮点数等核心概念，包含实际代码示例</description><content:encoded><![CDATA[<blockquote>
<p>著名的大黑书 CSAPP《深入理解计算机系统》第二章学习笔记。从第二章（信息的表示与处理）开始，这是计算机底层数据表示的核心内容。</p></blockquote>
<h2 id="前言">前言</h2>
<p>从这一章开始，CSAPP将我们引入了计算机最底层的数据表示领域——<strong>梦开始的地方</strong>！</p>
<blockquote>
<p><strong>核心观点</strong>：计算机中的二进制序列本身是没有实际意义的，重要的是看你怎么去<strong>解释</strong>它。</p></blockquote>
<p>这句话贯穿了整个计算机系统的设计哲学。</p>
<h2 id="一整数表示">一、整数表示</h2>
<h3 id="内存模型基础">内存模型基础</h3>
<p>程序员编程时面对的是一个<strong>内存空间</strong>（一种抽象），这个内存空间本质上是：</p>
<ul>
<li>一个很长的<strong>字节数组</strong>（字节是内存的最小单位）</li>
<li>每个字节由8个二进制位组成</li>
<li>本质上就是一堆二进制序列</li>
</ul>
<h3 id="进制转换基础">进制转换基础</h3>
<p>每个字节里的8位二进制数习惯用16进制表示：</p>
<pre tabindex="0"><code>二进制: 11111111
十六进制: FF
</code></pre><p><strong>记忆技巧</strong>：</p>
<ul>
<li>16进制的两位分别由二进制的4位组成</li>
<li>每一位的权重：8、4、2、1（数字电路基础）</li>
</ul>
<h3 id="有符号数补码表示">有符号数（补码表示）</h3>
<p>以<code>int</code>类型为例：</p>
<ul>
<li><strong>大小</strong>：4个字节，共32位</li>
<li><strong>符号位</strong>：第一位，0表示正数，1表示负数</li>
<li><strong>存储方式</strong>：补码</li>
</ul>
<h4 id="补码的精妙设计">补码的精妙设计</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// 正数：直接表示
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>    <span class="c1">// 00000000 00000000 00000000 00000101
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 负数：补码表示
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="o">-</span><span class="mi">5</span><span class="p">;</span>   <span class="c1">// 11111111 11111111 11111111 11111011
</span></span></span></code></pre></div><p><strong>补码计算规则</strong>：</p>
<ol>
<li>正数的补码就是其二进制表示</li>
<li>负数的补码 = 按位取反 + 1</li>
<li>数的相反数 = 按位取反 + 1</li>
</ol>
<h4 id="补码的优势">补码的优势</h4>
<ol>
<li><strong>统一运算</strong>：加法和减法可以用同一套电路实现</li>
<li><strong>唯一零值</strong>：只有一个零的表示</li>
<li><strong>范围对称</strong>：能表示的负数比正数多一个</li>
</ol>
<h3 id="无符号数">无符号数</h3>
<p>无符号数最简单：32位二进制代码直接对应真值，没有符号位的概念。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">4294967295U</span><span class="p">;</span>  <span class="c1">// 2^32 - 1
</span></span></span></code></pre></div><h2 id="二实际编程练习">二、实际编程练习</h2>
<h3 id="1-大小端检测程序">1. 大小端检测程序</h3>
<p><strong>背景</strong>：大小端之争是计算机历史上的经典问题</p>
<ul>
<li><strong>小端机器</strong>：低位字节存储在低地址（现在PC大多是小端）</li>
<li><strong>大端机器</strong>：高位字节存储在低地址</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">char</span> <span class="nf">get_first_bytes</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">islittle_endian</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nf">get_first_bytes</span><span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">a</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;is little_endian</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;is big_endian</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">islittle_endian</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><strong>原理解析</strong>：</p>
<ul>
<li>整数1的二进制：<code>00000000 00000000 00000000 00000001</code></li>
<li>小端机器：第一个字节存储<code>01</code>（非零）</li>
<li>大端机器：第一个字节存储<code>00</code>（零）</li>
</ul>
<h3 id="2-字节序列显示程序">2. 字节序列显示程序</h3>
<p>这个程序可以显示任意数据类型在内存中的字节表示：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">byte_pointer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">show_bytes</span><span class="p">(</span><span class="n">byte_pointer</span> <span class="n">start</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;%.2x &#34;</span><span class="p">,</span> <span class="n">start</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span> 
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">show_int</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">show_bytes</span><span class="p">((</span><span class="n">byte_pointer</span><span class="p">)</span><span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">show_float</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">show_bytes</span><span class="p">((</span><span class="n">byte_pointer</span><span class="p">)</span><span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">show_pointer</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">show_bytes</span><span class="p">((</span><span class="n">byte_pointer</span><span class="p">)</span><span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">show_short</span><span class="p">(</span><span class="kt">short</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">show_bytes</span><span class="p">((</span><span class="n">byte_pointer</span><span class="p">)</span><span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">short</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">show_long</span><span class="p">(</span><span class="kt">long</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">show_bytes</span><span class="p">((</span><span class="n">byte_pointer</span><span class="p">)</span><span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">long</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">show_double</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">show_bytes</span><span class="p">((</span><span class="n">byte_pointer</span><span class="p">)</span><span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">double</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">test_show_bytes</span><span class="p">(</span><span class="kt">short</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">short</span> <span class="n">sval</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">long</span> <span class="n">lval</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="n">dval</span> <span class="o">=</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="n">val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;short %d: &#34;</span><span class="p">,</span> <span class="n">sval</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">show_short</span><span class="p">(</span><span class="n">sval</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;long %ld: &#34;</span><span class="p">,</span> <span class="n">lval</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">show_long</span><span class="p">(</span><span class="n">lval</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;double %f: &#34;</span><span class="p">,</span> <span class="n">dval</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">show_double</span><span class="p">(</span><span class="n">dval</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">test_show_bytes</span><span class="p">(</span><span class="mi">12345</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="3-位运算练习">3. 位运算练习</h3>
<p>位运算是底层编程的基础：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 设置所有位为1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">f1</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">|</span> <span class="mh">0xffffffff</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 设置所有位为0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">f2</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0x00000000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 设置最高字节为1，其他不变
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">f3</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">|</span> <span class="mh">0xff000000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 清除最低字节，其他不变
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">f4</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">&amp;</span> <span class="mh">0xffffff00</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">show_hex</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;0x%x</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mh">0x12345678</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;Original: &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">show_hex</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;f1 (set all 1): &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">show_hex</span><span class="p">(</span><span class="nf">f1</span><span class="p">(</span><span class="n">x</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;f2 (set all 0): &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">show_hex</span><span class="p">(</span><span class="nf">f2</span><span class="p">(</span><span class="n">x</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;f3 (set high byte): &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">show_hex</span><span class="p">(</span><span class="nf">f3</span><span class="p">(</span><span class="n">x</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;f4 (clear low byte): &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">show_hex</span><span class="p">(</span><span class="nf">f4</span><span class="p">(</span><span class="n">x</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="三数据类型总结">三、数据类型总结</h2>
<h3 id="整数类型">整数类型</h3>
<table>
  <thead>
      <tr>
          <th>类型</th>
          <th>大小</th>
          <th>范围</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><code>char</code></td>
          <td>1字节</td>
          <td>-128 ~ 127</td>
      </tr>
      <tr>
          <td><code>unsigned char</code></td>
          <td>1字节</td>
          <td>0 ~ 255</td>
      </tr>
      <tr>
          <td><code>short</code></td>
          <td>2字节</td>
          <td>-32,768 ~ 32,767</td>
      </tr>
      <tr>
          <td><code>unsigned short</code></td>
          <td>2字节</td>
          <td>0 ~ 65,535</td>
      </tr>
      <tr>
          <td><code>int</code></td>
          <td>4字节</td>
          <td>-2^31 ~ 2^31-1</td>
      </tr>
      <tr>
          <td><code>unsigned int</code></td>
          <td>4字节</td>
          <td>0 ~ 2^32-1</td>
      </tr>
  </tbody>
</table>
<p><strong>命名规则</strong>：无符号类型 = <code>unsigned</code> + 有符号类型名</p>
<blockquote>
<p><strong>注意</strong>：<code>unsigned</code> 单独使用等价于 <code>unsigned int</code></p></blockquote>
<h2 id="四浮点数ieee-754标准">四、浮点数（IEEE 754标准）</h2>
<p>浮点数的表示更加复杂，但设计同样精妙：</p>
<h3 id="浮点数结构">浮点数结构</h3>
<pre tabindex="0"><code>符号位(S) | 阶码(Exp) | 尾数(Frac)
   1位   |   8位     |   23位    (单精度float)
   1位   |   11位    |   52位    (双精度double)
</code></pre><h3 id="浮点数分类">浮点数分类</h3>
<ol>
<li><strong>规格化数</strong>：正常的浮点数</li>
<li><strong>非规格化数</strong>：接近零的很小数</li>
<li><strong>无穷大</strong>：溢出表示</li>
<li><strong>NaN</strong>：非数字（如0/0的结果）</li>
</ol>
<h3 id="浮点数的精妙之处">浮点数的精妙之处</h3>
<blockquote>
<p>浮点数和补码一样精妙，设计得可以像整数一样进行大小比较排序！</p></blockquote>
<p>当你理解了IEEE 754的设计哲学时，就不会再觉得浮点数复杂了。</p>
<h2 id="五运算与溢出">五、运算与溢出</h2>
<h3 id="整数运算特点">整数运算特点</h3>
<ol>
<li><strong>模运算</strong>：整数运算实际上是模2^w运算（w是位数）</li>
<li><strong>溢出处理</strong>：有符号数溢出可能产生意外结果</li>
<li><strong>类型转换</strong>：有符号和无符号之间的转换需要特别注意</li>
</ol>
<h3 id="实际应用中的陷阱">实际应用中的陷阱</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// 危险的代码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;a &gt; b</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>  <span class="c1">// 这行不会执行！
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span><span class="s">&#34;a &lt;= b</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span> <span class="c1">// 这行会执行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></div><p><strong>原因</strong>：比较时<code>b</code>被转换为无符号数，-1变成了很大的正数。</p>
<h2 id="六学习心得">六、学习心得</h2>
<h3 id="为什么要学习底层表示">为什么要学习底层表示？</h3>
<ol>
<li><strong>理解程序行为</strong>：很多&quot;奇怪&quot;的程序行为都能从底层找到原因</li>
<li><strong>性能优化</strong>：了解数据表示有助于写出更高效的代码</li>
<li><strong>调试能力</strong>：能够分析内存dump，理解程序崩溃原因</li>
<li><strong>系统编程</strong>：操作系统、编译器等系统软件开发的基础</li>
</ol>
<h3 id="学习建议">学习建议</h3>
<ol>
<li><strong>动手实践</strong>：一定要亲自编写和运行代码</li>
<li><strong>可视化理解</strong>：画出内存布局图</li>
<li><strong>关联思考</strong>：将抽象概念与具体实现联系起来</li>
<li><strong>循序渐进</strong>：从简单例子开始，逐步深入</li>
</ol>
<h2 id="总结">总结</h2>
<p>CSAPP第二章看似简单，实则包含了计算机系统最核心的设计思想：</p>
<ul>
<li><strong>补码设计</strong>：统一了正负数的运算</li>
<li><strong>IEEE 754</strong>：精妙的浮点数表示标准</li>
<li><strong>位运算</strong>：高效的底层操作方式</li>
</ul>
<blockquote>
<p>计算机的底层既简单又复杂：简单在于其实现是如此优美和巧妙，复杂在于需要处理各种边界情况和特殊场景。</p></blockquote>
<p>理解这些基础概念，是深入学习计算机系统的第一步。接下来的章节会在这个基础上，探讨更复杂的系统概念。</p>
<hr>
<p><em>下一篇将总结CSAPP的Data Lab实验，那里有更多有趣的位运算挑战！</em></p>
]]></content:encoded></item><item><title>计算机网络概述：从OSI模型到TCP/IP协议栈</title><link>https://tyhzxh.github.io/posts/computer-network-overview/</link><pubDate>Mon, 25 Mar 2024 22:24:11 +0800</pubDate><guid>https://tyhzxh.github.io/posts/computer-network-overview/</guid><description>深入解析计算机网络的核心概念，包括OSI七层模型和TCP/IP四层模型的对比，以及HTTP、TCP、IP等重要协议的工作原理和应用场景</description><content:encoded><![CDATA[<h2 id="计算机网络基础概述">计算机网络基础概述</h2>
<p>计算机网络是现代信息技术的基础设施，理解网络模型和协议对于任何IT从业者都至关重要。本文将深入探讨网络分层模型、核心协议及其实际应用。</p>
<h2 id="网络分层模型对比">网络分层模型对比</h2>
<h3 id="osi七层模型">OSI七层模型</h3>
<p><strong>OSI（Open Systems Interconnection）模型</strong>是国际标准化组织制定的网络通信标准模型，将网络通信分为七个层次：</p>
<table>
  <thead>
      <tr>
          <th>层次</th>
          <th>名称</th>
          <th>功能描述</th>
          <th>典型协议/技术</th>
          <th>数据单位</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>第7层</strong></td>
          <td>应用层</td>
          <td>为应用程序提供网络服务</td>
          <td>HTTP、HTTPS、FTP、SMTP、DNS</td>
          <td>数据</td>
      </tr>
      <tr>
          <td><strong>第6层</strong></td>
          <td>表示层</td>
          <td>数据格式转换、加密解密、压缩</td>
          <td>SSL/TLS、JPEG、MPEG</td>
          <td>数据</td>
      </tr>
      <tr>
          <td><strong>第5层</strong></td>
          <td>会话层</td>
          <td>建立、管理、终止会话连接</td>
          <td>NetBIOS、RPC、SQL</td>
          <td>数据</td>
      </tr>
      <tr>
          <td><strong>第4层</strong></td>
          <td>传输层</td>
          <td>端到端的可靠数据传输</td>
          <td>TCP、UDP</td>
          <td>段（Segment）</td>
      </tr>
      <tr>
          <td><strong>第3层</strong></td>
          <td>网络层</td>
          <td>路径选择和逻辑地址</td>
          <td>IP、ICMP、OSPF、BGP</td>
          <td>包（Packet）</td>
      </tr>
      <tr>
          <td><strong>第2层</strong></td>
          <td>数据链路层</td>
          <td>物理地址和错误检测</td>
          <td>Ethernet、WiFi、PPP</td>
          <td>帧（Frame）</td>
      </tr>
      <tr>
          <td><strong>第1层</strong></td>
          <td>物理层</td>
          <td>电气、物理、功能和过程特性</td>
          <td>双绞线、光纤、无线电波</td>
          <td>比特（Bit）</td>
      </tr>
  </tbody>
</table>
<h3 id="tcpip四层模型">TCP/IP四层模型</h3>
<p><strong>TCP/IP模型</strong>是互联网实际使用的网络模型，更加实用和简化：</p>
<table>
  <thead>
      <tr>
          <th>TCP/IP层次</th>
          <th>功能描述</th>
          <th>对应OSI层</th>
          <th>主要协议</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>应用层</strong></td>
          <td>应用程序接口和服务</td>
          <td>应用层+表示层+会话层</td>
          <td>HTTP、HTTPS、FTP、SMTP、DNS、SSH</td>
      </tr>
      <tr>
          <td><strong>传输层</strong></td>
          <td>端到端通信和数据完整性</td>
          <td>传输层</td>
          <td>TCP、UDP</td>
      </tr>
      <tr>
          <td><strong>网络层</strong></td>
          <td>路由和寻址</td>
          <td>网络层</td>
          <td>IP、ICMP、ARP</td>
      </tr>
      <tr>
          <td><strong>网络接口层</strong></td>
          <td>物理网络访问</td>
          <td>数据链路层+物理层</td>
          <td>Ethernet、WiFi、PPP</td>
      </tr>
  </tbody>
</table>
<h3 id="两种模型的对比">两种模型的对比</h3>
<pre tabindex="0"><code>OSI七层模型                    TCP/IP四层模型
┌─────────────┐               ┌─────────────┐
│   应用层    │               │             │
├─────────────┤               │   应用层    │
│   表示层    │               │             │
├─────────────┤               │             │
│   会话层    │               │             │
├─────────────┤               ├─────────────┤
│   传输层    │  ────────────  │   传输层    │
├─────────────┤               ├─────────────┤
│   网络层    │  ────────────  │   网络层    │
├─────────────┤               ├─────────────┤
│ 数据链路层  │               │ 网络接口层  │
├─────────────┤               │             │
│   物理层    │               │             │
└─────────────┘               └─────────────┘
</code></pre><h2 id="核心协议详解">核心协议详解</h2>
<h3 id="http协议超文本传输协议">HTTP协议（超文本传输协议）</h3>
<h4 id="http基本概念">HTTP基本概念</h4>
<p>**HTTP（HyperText Transfer Protocol）**是应用层协议，用于在Web浏览器和Web服务器之间传输数据。</p>
<h4 id="http工作原理">HTTP工作原理</h4>
<pre tabindex="0"><code>客户端                                    服务器
   │                                        │
   │ ──── HTTP请求（Request） ────────────→ │
   │                                        │
   │ ←──── HTTP响应（Response） ─────────── │
   │                                        │
</code></pre><h4 id="http请求结构">HTTP请求结构</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="line"><span class="cl"><span class="nf">GET</span> <span class="nn">/api/users/123</span> <span class="kr">HTTP</span><span class="o">/</span><span class="m">1.1</span>
</span></span><span class="line"><span class="cl"><span class="n">Host</span><span class="o">:</span> <span class="l">www.example.com</span>
</span></span><span class="line"><span class="cl"><span class="n">User-Agent</span><span class="o">:</span> <span class="l">Mozilla/5.0 (Windows NT 10.0; Win64; x64)</span>
</span></span><span class="line"><span class="cl"><span class="n">Accept</span><span class="o">:</span> <span class="l">application/json</span>
</span></span><span class="line"><span class="cl"><span class="n">Authorization</span><span class="o">:</span> <span class="l">Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...</span>
</span></span><span class="line"><span class="cl"><span class="n">Content-Type</span><span class="o">:</span> <span class="l">application/json</span>
</span></span><span class="line"><span class="cl"><span class="n">Content-Length</span><span class="o">:</span> <span class="l">85</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;张三&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;email&#34;</span><span class="p">:</span> <span class="s2">&#34;zhangsan@example.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="http响应结构">HTTP响应结构</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="line"><span class="cl"><span class="kr">HTTP</span><span class="o">/</span><span class="m">1.1</span> <span class="m">200</span> <span class="ne">OK</span>
</span></span><span class="line"><span class="cl"><span class="n">Date</span><span class="o">:</span> <span class="l">Mon, 25 Mar 2024 10:30:00 GMT</span>
</span></span><span class="line"><span class="cl"><span class="n">Server</span><span class="o">:</span> <span class="l">nginx/1.18.0</span>
</span></span><span class="line"><span class="cl"><span class="n">Content-Type</span><span class="o">:</span> <span class="l">application/json; charset=utf-8</span>
</span></span><span class="line"><span class="cl"><span class="n">Content-Length</span><span class="o">:</span> <span class="l">156</span>
</span></span><span class="line"><span class="cl"><span class="n">Cache-Control</span><span class="o">:</span> <span class="l">no-cache</span>
</span></span><span class="line"><span class="cl"><span class="n">Set-Cookie</span><span class="o">:</span> <span class="l">sessionid=abc123; Path=/; HttpOnly</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;张三&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;email&#34;</span><span class="p">:</span> <span class="s2">&#34;zhangsan@example.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;created_at&#34;</span><span class="p">:</span> <span class="s2">&#34;2024-03-25T10:30:00Z&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h4 id="http方法详解">HTTP方法详解</h4>
<table>
  <thead>
      <tr>
          <th>方法</th>
          <th>用途</th>
          <th>幂等性</th>
          <th>安全性</th>
          <th>示例</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>GET</strong></td>
          <td>获取资源</td>
          <td>✓</td>
          <td>✓</td>
          <td><code>GET /api/users</code></td>
      </tr>
      <tr>
          <td><strong>POST</strong></td>
          <td>创建资源</td>
          <td>✗</td>
          <td>✗</td>
          <td><code>POST /api/users</code></td>
      </tr>
      <tr>
          <td><strong>PUT</strong></td>
          <td>更新/创建资源</td>
          <td>✓</td>
          <td>✗</td>
          <td><code>PUT /api/users/123</code></td>
      </tr>
      <tr>
          <td><strong>PATCH</strong></td>
          <td>部分更新资源</td>
          <td>✗</td>
          <td>✗</td>
          <td><code>PATCH /api/users/123</code></td>
      </tr>
      <tr>
          <td><strong>DELETE</strong></td>
          <td>删除资源</td>
          <td>✓</td>
          <td>✗</td>
          <td><code>DELETE /api/users/123</code></td>
      </tr>
      <tr>
          <td><strong>HEAD</strong></td>
          <td>获取响应头</td>
          <td>✓</td>
          <td>✓</td>
          <td><code>HEAD /api/users/123</code></td>
      </tr>
      <tr>
          <td><strong>OPTIONS</strong></td>
          <td>获取支持的方法</td>
          <td>✓</td>
          <td>✓</td>
          <td><code>OPTIONS /api/users</code></td>
      </tr>
  </tbody>
</table>
<h4 id="http状态码">HTTP状态码</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// 1xx 信息性状态码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mi">100</span> <span class="nx">Continue</span>              <span class="c1">// 继续请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mi">101</span> <span class="nx">Switching</span> <span class="nx">Protocols</span>   <span class="c1">// 切换协议
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 2xx 成功状态码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mi">200</span> <span class="nx">OK</span>                    <span class="c1">// 请求成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mi">201</span> <span class="nx">Created</span>              <span class="c1">// 资源创建成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mi">204</span> <span class="nx">No</span> <span class="nx">Content</span>           <span class="c1">// 成功但无内容返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 3xx 重定向状态码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mi">301</span> <span class="nx">Moved</span> <span class="nx">Permanently</span>    <span class="c1">// 永久重定向
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mi">302</span> <span class="nx">Found</span>               <span class="c1">// 临时重定向
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mi">304</span> <span class="nx">Not</span> <span class="nx">Modified</span>        <span class="c1">// 资源未修改
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 4xx 客户端错误
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mi">400</span> <span class="nx">Bad</span> <span class="nx">Request</span>         <span class="c1">// 请求语法错误
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mi">401</span> <span class="nx">Unauthorized</span>        <span class="c1">// 未授权
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mi">403</span> <span class="nx">Forbidden</span>          <span class="c1">// 禁止访问
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mi">404</span> <span class="nx">Not</span> <span class="nx">Found</span>          <span class="c1">// 资源不存在
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mi">429</span> <span class="nx">Too</span> <span class="nx">Many</span> <span class="nx">Requests</span>  <span class="c1">// 请求过多
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 5xx 服务器错误
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mi">500</span> <span class="nx">Internal</span> <span class="nx">Server</span> <span class="nb">Error</span>  <span class="c1">// 服务器内部错误
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mi">502</span> <span class="nx">Bad</span> <span class="nx">Gateway</span>           <span class="c1">// 网关错误
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mi">503</span> <span class="nx">Service</span> <span class="nx">Unavailable</span>   <span class="c1">// 服务不可用
</span></span></span></code></pre></div><h4 id="https安全增强">HTTPS安全增强</h4>
<pre tabindex="0"><code>HTTP + SSL/TLS = HTTPS

客户端                                    服务器
   │                                        │
   │ ──── SSL握手（建立安全连接） ────────→ │
   │ ←──── 证书验证 ─────────────────────── │
   │ ──── 加密的HTTP请求 ─────────────────→ │
   │ ←──── 加密的HTTP响应 ────────────────── │
   │                                        │
</code></pre><h3 id="tcp协议传输控制协议">TCP协议（传输控制协议）</h3>
<h4 id="tcp基本特性">TCP基本特性</h4>
<p>**TCP（Transmission Control Protocol）**是面向连接的、可靠的传输层协议。</p>
<h4 id="tcp核心特性">TCP核心特性</h4>
<table>
  <thead>
      <tr>
          <th>特性</th>
          <th>描述</th>
          <th>实现机制</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>面向连接</strong></td>
          <td>通信前需建立连接</td>
          <td>三次握手建立连接</td>
      </tr>
      <tr>
          <td><strong>可靠传输</strong></td>
          <td>保证数据完整性</td>
          <td>序列号、确认应答、重传</td>
      </tr>
      <tr>
          <td><strong>流量控制</strong></td>
          <td>防止发送方过快</td>
          <td>滑动窗口机制</td>
      </tr>
      <tr>
          <td><strong>拥塞控制</strong></td>
          <td>防止网络拥塞</td>
          <td>慢启动、拥塞避免</td>
      </tr>
      <tr>
          <td><strong>全双工通信</strong></td>
          <td>双向数据传输</td>
          <td>独立的发送和接收缓冲区</td>
      </tr>
  </tbody>
</table>
<h4 id="tcp三次握手">TCP三次握手</h4>
<pre tabindex="0"><code>客户端                                    服务器
   │                                        │
   │ ──── SYN（seq=x） ──────────────────→ │  第一次握手
   │                                        │
   │ ←──── SYN+ACK（seq=y, ack=x+1） ───── │  第二次握手
   │                                        │
   │ ──── ACK（seq=x+1, ack=y+1） ───────→ │  第三次握手
   │                                        │
   │ ═══════ 连接建立，开始数据传输 ═══════ │
</code></pre><h4 id="tcp四次挥手">TCP四次挥手</h4>
<pre tabindex="0"><code>客户端                                    服务器
   │                                        │
   │ ──── FIN（seq=u） ──────────────────→ │  第一次挥手
   │                                        │
   │ ←──── ACK（ack=u+1） ────────────────── │  第二次挥手
   │                                        │
   │ ←──── FIN（seq=v） ────────────────── │  第三次挥手
   │                                        │
   │ ──── ACK（ack=v+1） ────────────────→ │  第四次挥手
   │                                        │
   │ ═══════ 连接关闭 ═══════════════════ │
</code></pre><h4 id="tcp-vs-udp对比">TCP vs UDP对比</h4>
<table>
  <thead>
      <tr>
          <th>特性</th>
          <th>TCP</th>
          <th>UDP</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>连接性</strong></td>
          <td>面向连接</td>
          <td>无连接</td>
      </tr>
      <tr>
          <td><strong>可靠性</strong></td>
          <td>可靠传输</td>
          <td>不可靠传输</td>
      </tr>
      <tr>
          <td><strong>速度</strong></td>
          <td>较慢（开销大）</td>
          <td>较快（开销小）</td>
      </tr>
      <tr>
          <td><strong>数据边界</strong></td>
          <td>字节流</td>
          <td>数据报</td>
      </tr>
      <tr>
          <td><strong>应用场景</strong></td>
          <td>HTTP、FTP、邮件</td>
          <td>DNS、视频流、游戏</td>
      </tr>
  </tbody>
</table>
<h3 id="ip协议网际协议">IP协议（网际协议）</h3>
<h4 id="ip协议概述">IP协议概述</h4>
<p>**IP（Internet Protocol）**是网络层协议，负责在网络中路由数据包。</p>
<h4 id="ipv4地址结构">IPv4地址结构</h4>
<pre tabindex="0"><code>IPv4地址：32位，分为4个8位字节
示例：192.168.1.100

二进制表示：
11000000.10101000.00000001.01100100

地址分类：
A类：1.0.0.0    - 126.255.255.255  （/8）
B类：128.0.0.0  - 191.255.255.255  （/16）
C类：192.0.0.0  - 223.255.255.255  （/24）
</code></pre><h4 id="私有ip地址范围">私有IP地址范围</h4>
<table>
  <thead>
      <tr>
          <th>类别</th>
          <th>地址范围</th>
          <th>子网掩码</th>
          <th>用途</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>A类私有</td>
          <td>10.0.0.0 - 10.255.255.255</td>
          <td>255.0.0.0</td>
          <td>大型企业网络</td>
      </tr>
      <tr>
          <td>B类私有</td>
          <td>172.16.0.0 - 172.31.255.255</td>
          <td>255.240.0.0</td>
          <td>中型企业网络</td>
      </tr>
      <tr>
          <td>C类私有</td>
          <td>192.168.0.0 - 192.168.255.255</td>
          <td>255.255.0.0</td>
          <td>家庭/小型网络</td>
      </tr>
  </tbody>
</table>
<h4 id="ipv6地址结构">IPv6地址结构</h4>
<pre tabindex="0"><code>IPv6地址：128位，分为8组，每组4个十六进制数字
示例：2001:0db8:85a3:0000:0000:8a2e:0370:7334

简化表示：
2001:db8:85a3::8a2e:370:7334

地址类型：
单播地址：一对一通信
组播地址：一对多通信
任播地址：一对最近一个通信
</code></pre><h2 id="网络通信实例">网络通信实例</h2>
<h3 id="完整的http请求过程">完整的HTTP请求过程</h3>
<pre tabindex="0"><code>1. DNS解析
   www.example.com → 93.184.216.34

2. TCP连接建立（三次握手）
   客户端:1234 ←→ 服务器:80

3. HTTP请求发送
   GET / HTTP/1.1
   Host: www.example.com

4. HTTP响应接收
   HTTP/1.1 200 OK
   Content-Type: text/html

5. TCP连接关闭（四次挥手）
</code></pre><h3 id="数据包封装过程">数据包封装过程</h3>
<pre tabindex="0"><code>应用层：HTTP数据
    ↓
传输层：TCP头部 + HTTP数据
    ↓
网络层：IP头部 + TCP头部 + HTTP数据
    ↓
数据链路层：以太网头部 + IP头部 + TCP头部 + HTTP数据 + 以太网尾部
    ↓
物理层：电信号/光信号
</code></pre><h2 id="网络安全基础">网络安全基础</h2>
<h3 id="常见网络攻击">常见网络攻击</h3>
<table>
  <thead>
      <tr>
          <th>攻击类型</th>
          <th>描述</th>
          <th>防护措施</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>DDoS攻击</strong></td>
          <td>分布式拒绝服务</td>
          <td>流量清洗、CDN</td>
      </tr>
      <tr>
          <td><strong>中间人攻击</strong></td>
          <td>截获通信内容</td>
          <td>HTTPS、证书验证</td>
      </tr>
      <tr>
          <td><strong>SQL注入</strong></td>
          <td>恶意SQL代码</td>
          <td>参数化查询、输入验证</td>
      </tr>
      <tr>
          <td><strong>XSS攻击</strong></td>
          <td>跨站脚本攻击</td>
          <td>输入过滤、CSP策略</td>
      </tr>
  </tbody>
</table>
<h3 id="网络安全协议">网络安全协议</h3>
<pre tabindex="0"><code>SSL/TLS：传输层安全
IPSec：网络层安全
WPA/WPA2：无线网络安全
SSH：安全远程访问
</code></pre><h2 id="网络性能优化">网络性能优化</h2>
<h3 id="常见优化技术">常见优化技术</h3>
<ol>
<li>
<p><strong>CDN（内容分发网络）</strong></p>
<ul>
<li>就近访问，减少延迟</li>
<li>分担源服务器压力</li>
</ul>
</li>
<li>
<p><strong>负载均衡</strong></p>
<ul>
<li>分散请求到多台服务器</li>
<li>提高系统可用性</li>
</ul>
</li>
<li>
<p><strong>缓存策略</strong></p>
<ul>
<li>浏览器缓存</li>
<li>代理服务器缓存</li>
<li>应用层缓存</li>
</ul>
</li>
<li>
<p><strong>压缩技术</strong></p>
<ul>
<li>Gzip压缩</li>
<li>Brotli压缩</li>
<li>图片压缩</li>
</ul>
</li>
</ol>
<h3 id="网络监控指标">网络监控指标</h3>
<table>
  <thead>
      <tr>
          <th>指标</th>
          <th>描述</th>
          <th>正常范围</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>延迟（Latency）</strong></td>
          <td>数据传输时间</td>
          <td>&lt; 100ms</td>
      </tr>
      <tr>
          <td><strong>带宽（Bandwidth）</strong></td>
          <td>数据传输速率</td>
          <td>根据需求</td>
      </tr>
      <tr>
          <td><strong>丢包率（Packet Loss）</strong></td>
          <td>数据包丢失比例</td>
          <td>&lt; 1%</td>
      </tr>
      <tr>
          <td><strong>吞吐量（Throughput）</strong></td>
          <td>实际数据传输量</td>
          <td>接近带宽</td>
      </tr>
  </tbody>
</table>
<h2 id="实际应用场景">实际应用场景</h2>
<h3 id="web应用架构">Web应用架构</h3>
<pre tabindex="0"><code>用户浏览器
    ↓ HTTP/HTTPS
负载均衡器
    ↓ HTTP
Web服务器（Nginx/Apache）
    ↓ HTTP/FastCGI
应用服务器（Node.js/Java/Python）
    ↓ TCP/IP
数据库服务器（MySQL/PostgreSQL）
</code></pre><h3 id="微服务通信">微服务通信</h3>
<pre tabindex="0"><code>服务A ←─ HTTP/REST ─→ 服务B
  │                      │
  └─ gRPC/TCP ─→ 服务C ←─┘
  │                      │
  └─ Message Queue ─→ 服务D
</code></pre><h2 id="学习建议">学习建议</h2>
<h3 id="理论学习路径">理论学习路径</h3>
<ol>
<li><strong>基础概念</strong>：理解网络分层模型</li>
<li><strong>协议原理</strong>：深入学习TCP/IP、HTTP</li>
<li><strong>网络编程</strong>：Socket编程实践</li>
<li><strong>安全知识</strong>：网络安全基础</li>
<li><strong>性能优化</strong>：网络调优技术</li>
</ol>
<h3 id="实践项目建议">实践项目建议</h3>
<ol>
<li><strong>搭建简单Web服务器</strong></li>
<li><strong>实现HTTP客户端</strong></li>
<li><strong>网络抓包分析</strong></li>
<li><strong>配置负载均衡</strong></li>
<li><strong>部署HTTPS证书</strong></li>
</ol>
<h2 id="总结">总结</h2>
<p>计算机网络是现代信息技术的基础，理解网络模型和协议对于：</p>
<ul>
<li><strong>开发人员</strong>：编写网络应用程序</li>
<li><strong>运维人员</strong>：网络故障排查和优化</li>
<li><strong>架构师</strong>：设计分布式系统</li>
<li><strong>安全工程师</strong>：网络安全防护</li>
</ul>
<p>掌握这些基础知识将为深入学习更高级的网络技术打下坚实基础。建议结合理论学习和实际操作，通过抓包分析、网络编程等方式加深理解。</p>
]]></content:encoded></item></channel></rss>