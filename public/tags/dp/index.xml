<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>DP on tyhzxh的个人博客</title><link>https://tyhzxh.github.io/tags/dp/</link><description>Recent content in DP on tyhzxh的个人博客</description><generator>Hugo -- 0.148.2</generator><language>zh-cn</language><lastBuildDate>Tue, 27 Feb 2024 22:05:43 +0800</lastBuildDate><atom:link href="https://tyhzxh.github.io/tags/dp/index.xml" rel="self" type="application/rss+xml"/><item><title>动态规划完全攻略：从入门到精通</title><link>https://tyhzxh.github.io/posts/dynamic-programming-guide/</link><pubDate>Tue, 27 Feb 2024 22:05:43 +0800</pubDate><guid>https://tyhzxh.github.io/posts/dynamic-programming-guide/</guid><description>动态规划系统训练方案，从核心思维到高频题型再到实战技巧的全面覆盖，包含完整的学习路线和避坑指南</description><content:encoded><![CDATA[<blockquote>
<p>今天开始！DP！针对动态规划（DP）的系统训练，这是一套完整的训练方案，从<strong>核心思维</strong>到<strong>高频题型</strong>再到<strong>实战技巧</strong>全面覆盖。</p></blockquote>
<h2 id="一动态规划核心思维训练">一、动态规划核心思维训练</h2>
<h3 id="1-破除两大误区">1. 破除两大误区</h3>
<ul>
<li>
<p>❌ <strong>误区1</strong>：必须找到最优子结构才能用DP<br>
✅ <strong>正确姿势</strong>：先暴力递归 → 发现重叠子问题 → 改记忆化搜索 → 再推导DP方程</p>
</li>
<li>
<p>❌ <strong>误区2</strong>：DP必须用数组存储状态<br>
✅ <strong>正确姿势</strong>：学会状态压缩（如打家劫舍用两个变量代替数组）</p>
</li>
</ul>
<h3 id="2-四步解题法用爬楼梯问题实践">2. 四步解题法（用爬楼梯问题实践）</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 原题：每次爬1或2阶，到n阶有多少种方法？</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1. 定义状态：dp[i]表示到i阶的方法数</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 初始状态：dp[0]=1, dp[1]=1（注意不是常规的dp[0]=0）</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 3. 状态转移：dp[i] = dp[i-1] + dp[i-2]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 4. 优化空间：只需prev和curr两个变量滚动计算</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">climbStairs</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">prev</span><span class="p">,</span> <span class="n">curr</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">prev</span><span class="p">,</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="p">,</span> <span class="n">prev</span> <span class="o">+</span> <span class="n">curr</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">curr</span>
</span></span></code></pre></div><h3 id="3-高频状态转移类型">3. 高频状态转移类型</h3>
<table>
  <thead>
      <tr>
          <th>类型</th>
          <th>经典例题</th>
          <th>状态转移关键点</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>单序列线性DP</td>
          <td>打家劫舍(198)</td>
          <td><code>dp[i] = max(dp[i-1], dp[i-2]+nums[i])</code></td>
      </tr>
      <tr>
          <td>双序列匹配DP</td>
          <td>最长公共子序列(1143)</td>
          <td><code>dp[i][j] = 1+dp[i-1][j-1] if s[i]==t[j]</code></td>
      </tr>
      <tr>
          <td>区间DP</td>
          <td>最长回文子串(5)</td>
          <td><code>dp[i][j] = (s[i]==s[j]) and dp[i+1][j-1]</code></td>
      </tr>
      <tr>
          <td>背包DP</td>
          <td>分割等和子集(416)</td>
          <td><code>dp[j] = dp[j] or dp[j-num]</code></td>
      </tr>
      <tr>
          <td>状态机DP</td>
          <td>买卖股票最佳时机(121/122)</td>
          <td>持有/未持有两种状态转换</td>
      </tr>
  </tbody>
</table>
<h2 id="二阶梯式训练路线">二、阶梯式训练路线</h2>
<h3 id="阶段1基础模型搭建1-2周">阶段1：基础模型搭建（1-2周）</h3>
<table>
  <thead>
      <tr>
          <th>题目</th>
          <th>训练重点</th>
          <th>突破技巧</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>70. 爬楼梯</td>
          <td>斐波那契型DP</td>
          <td>空间压缩到O(1)</td>
      </tr>
      <tr>
          <td>118. 杨辉三角</td>
          <td>二维DP填表逻辑</td>
          <td>观察行列关系</td>
      </tr>
      <tr>
          <td>121. 买卖股票的最佳时机</td>
          <td>状态机模型</td>
          <td>维护min_price和max_profit</td>
      </tr>
      <tr>
          <td>53. 最大子数组和</td>
          <td>决策型DP（选或不选）</td>
          <td>用curr_max代替dp数组</td>
      </tr>
      <tr>
          <td>746. 使用最小花费爬楼梯</td>
          <td>路径成本计算</td>
          <td>逆向推导更简单</td>
      </tr>
  </tbody>
</table>
<h3 id="阶段2经典题型突破2-3周">阶段2：经典题型突破（2-3周）</h3>
<table>
  <thead>
      <tr>
          <th>题目</th>
          <th>难点解析</th>
          <th>代码模板片段</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>198. 打家劫舍</strong></td>
          <td>相邻不能选</td>
          <td><code>max(dp[i-1], dp[i-2]+nums[i])</code></td>
      </tr>
      <tr>
          <td><strong>322. 零钱兑换</strong></td>
          <td>完全背包最小值</td>
          <td><code>dp[amt] = min(dp[amt], dp[amt-coin]+1)</code></td>
      </tr>
      <tr>
          <td><strong>300. 最长递增子序列</strong></td>
          <td>O(n²)与O(nlogn)两种解法</td>
          <td>二分查找维护tails数组</td>
      </tr>
      <tr>
          <td><strong>1143. 最长公共子序列</strong></td>
          <td>双序列匹配</td>
          <td><code>if s[i]==t[j]: dp[i][j]=dp[i-1][j-1]+1</code></td>
      </tr>
      <tr>
          <td><strong>139. 单词拆分</strong></td>
          <td>字符串分段判断</td>
          <td><code>dp[i] = any(dp[j] and s[j:i] in dict)</code></td>
      </tr>
  </tbody>
</table>
<h3 id="阶段3高难度挑战3-4周">阶段3：高难度挑战（3-4周）</h3>
<table>
  <thead>
      <tr>
          <th>题目</th>
          <th>破题关键点</th>
          <th>优化技巧</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><strong>72. 编辑距离</strong></td>
          <td>三种操作的状态转移</td>
          <td>空间压缩到一维数组</td>
      </tr>
      <tr>
          <td><strong>152. 乘积最大子数组</strong></td>
          <td>处理负数乘积</td>
          <td>同时维护max和min</td>
      </tr>
      <tr>
          <td><strong>312. 戳气球</strong></td>
          <td>区间DP逆向思维</td>
          <td>从最后戳破的气球倒推</td>
      </tr>
      <tr>
          <td><strong>10. 正则表达式匹配</strong></td>
          <td>星号匹配的特殊处理</td>
          <td>分情况讨论pattern的第二个字符</td>
      </tr>
      <tr>
          <td><strong>887. 鸡蛋掉落</strong></td>
          <td>决策最优化的数学推导</td>
          <td>逆向思维+二分查找优化</td>
      </tr>
  </tbody>
</table>
<h2 id="三避坑指南与实战技巧">三、避坑指南与实战技巧</h2>
<h3 id="1-五大常见错误类型">1. 五大常见错误类型</h3>
<ul>
<li>🚫 <strong>初始化错误</strong>：比如背包问题中dp[0]应该初始化为True</li>
<li>🚫 <strong>遍历顺序错误</strong>：完全背包要正序循环，01背包要倒序循环</li>
<li>🚫 <strong>状态转移遗漏</strong>：如编辑距离忘记考虑replace操作</li>
<li>🚫 <strong>二维DP行列混淆</strong>：把s的长度当作行还是列要统一</li>
<li>🚫 <strong>空间压缩陷阱</strong>：覆盖未使用的旧值导致错误</li>
</ul>
<h3 id="2-三步优化方法论">2. 三步优化方法论</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"><span class="k">1.</span> <span class="gs">**暴力递归**</span> → 写出基本状态转移
</span></span><span class="line"><span class="cl">   <span class="k">-</span> 斐波那契数列递归版
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl"><span class="k">2.</span> <span class="gs">**记忆化搜索**</span> → 添加缓存（<span class="ni">@lru_cache</span>）
</span></span><span class="line"><span class="cl">   <span class="k">-</span> 用装饰器自动缓存参数
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl"><span class="k">3.</span> <span class="gs">**推导DP方程**</span> → 优化空间复杂度
</span></span><span class="line"><span class="cl">   <span class="k">-</span> 观察状态依赖关系，压缩维度
</span></span></code></pre></div><h3 id="3-面试应答技巧">3. 面试应答技巧</h3>
<ul>
<li>💡 先说出暴力解的时间复杂度</li>
<li>💡 明确说出DP数组的定义和维度</li>
<li>💡 在白板上先写状态转移方程再编码</li>
<li>💡 主动讨论空间优化可能性</li>
</ul>
<h2 id="四配套训练资源">四、配套训练资源</h2>
<h3 id="1-可视化学习">1. 可视化学习</h3>
<ul>
<li><strong>DPV 算法可视化网站</strong> - 动态展示DP执行过程</li>
<li><strong>VisuAlgo 动态规划专题</strong> - 包含LCS、背包等问题动画</li>
</ul>
<h3 id="2-专项题单">2. 专项题单</h3>
<ul>
<li><strong>LeetCode动态规划分类</strong> → 按通过率排序练习</li>
<li><strong>经典DP问题Top 50</strong> → 涵盖所有DP类型</li>
</ul>
<h3 id="3-错题本模板">3. 错题本模板</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"><span class="gu">## 72. 编辑距离
</span></span></span><span class="line"><span class="cl"><span class="gu">### 错误记录
</span></span></span><span class="line"><span class="cl"><span class="gu"></span><span class="k">-</span> 初始版本忘记处理空字符串情况
</span></span><span class="line"><span class="cl"><span class="k">-</span> 误将替换操作的成本计算为2（正确是1）
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="gu">### 状态转移表
</span></span></span><span class="line"><span class="cl"><span class="gu"></span>|       | &#34;&#34; | r | o | s |
</span></span><span class="line"><span class="cl">|-------|----|---|---|---|
</span></span><span class="line"><span class="cl">| &#34;&#34;    | 0 | 1 | 2 | 3 |
</span></span><span class="line"><span class="cl">| h     | 1 | 1 | 2 | 3 | 
</span></span><span class="line"><span class="cl">| o     | 2 | 2 | 1 | 2 |
</span></span><span class="line"><span class="cl">| r     | 3 | 2 | 2 | 2 |
</span></span><span class="line"><span class="cl">| s     | 4 | 3 | 3 | 2 |
</span></span></code></pre></div><h2 id="五训练计划建议">五、训练计划建议</h2>
<h3 id="每日任务">每日任务</h3>
<ul>
<li><strong>上午</strong>：精做1道新DP题（按阶段选择难度）</li>
<li><strong>下午</strong>：复习2道旧题，写出空间优化版本</li>
<li><strong>晚上</strong>：观看对应题目的讲解视频</li>
</ul>
<h3 id="每周检验">每周检验</h3>
<ul>
<li>周赛至少完成2道DP相关题目</li>
<li>整理本周的DP类型思维导图</li>
</ul>
<h2 id="预期效果">预期效果</h2>
<p>坚持按照这个方案训练<strong>2个月</strong>后，你会明显发现：</p>
<ol>
<li>✅ 中等DP题能在15分钟内找到思路</li>
<li>✅ 能轻松应对字符串匹配、背包类问题</li>
<li>✅ 面对hard题时有清晰的拆解策略</li>
</ol>
<h2 id="总结">总结</h2>
<blockquote>
<p>动态规划的本质是用空间换时间，核心是找到<strong>重叠子问题</strong>和<strong>最优子结构</strong>。多动手画状态转移表，你的大脑会逐渐建立DP的思维模式。</p></blockquote>
<p>记住：<strong>Practice makes perfect!</strong> 动态规划需要大量的练习来培养直觉，但一旦掌握，它将成为你算法工具箱中最强大的武器之一。</p>
<hr>
<p><em>持续更新中，欢迎交流讨论！</em></p>
]]></content:encoded></item></channel></rss>